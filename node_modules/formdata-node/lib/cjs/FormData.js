"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _FormData_instances, _FormData_stream, _FormData_content, _FormData_footer, _FormData_getHeader, _FormData_getField, _FormData_setField;
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.FormData = void 0;
const stream_1 = require("stream");
const path_1 = require("path");
const util_1 = require("util");
const File_1 = require("./File");
const fileFromPath_1 = require("./fileFromPath");
const deprecateHeaders_1 = __importDefault(require("./util/deprecateHeaders"));
const deprecateReadStream_1 = __importDefault(require("./util/deprecateReadStream"));
const deprecateGetComputedLength_1 = __importDefault(require("./util/deprecateGetComputedLength"));
const deprecateSymbolAsyncIterator_1 = __importDefault(require("./util/deprecateSymbolAsyncIterator"));
const deprecateBuffer_1 = __importDefault(require("./util/deprecateBuffer"));
const deprecateStream_1 = __importDefault(require("./util/deprecateStream"));
const isFile_1 = __importDefault(require("./util/isFile"));
const getLength_1 = __importDefault(require("./util/getLength"));
const isPlainObject_1 = __importDefault(require("./util/isPlainObject"));
const createBoundary_1 = __importDefault(require("./util/createBoundary"));
const isReadStream_1 = __importDefault(require("./util/isReadStream"));
const getFilename_1 = __importDefault(require("./util/getFilename"));
const { isBuffer } = Buffer;
const DASHES = "-".repeat(2);
const CRLF = "\r\n";
const CRLF_BYTES_LENGTH = Buffer.byteLength(CRLF);
class FormData {
    constructor(entries) {
        _FormData_instances.add(this);
        // TODO: Remove this along with FormData#stream getter in 4.x
        _FormData_stream.set(this, void 0);
        /**
         * Returns a boundary string
         */
        this.boundary = `NodeJSFormDataStreamBoundary${createBoundary_1.default()}`;
        /**
         * Stores internal data for every field
         */
        _FormData_content.set(this, new Map()
        /**
         * Returns field's footer
         */
        );
        /**
         * Returns field's footer
         */
        _FormData_footer.set(this, `${DASHES}${this.boundary}${DASHES}${CRLF.repeat(2)}`);
        if (entries) {
            entries.forEach(({ name, value, filename, options }) => this.append(name, value, filename, options));
        }
    }
    /**
     * Returns headers for multipart/form-data
     *
     * @deprecated FormData#headers property is non-standard and will be removed from this package in the next major release (4.x). Use https://npmjs.com/form-data-encoder package to serilize FormData.
     */
    get headers() {
        return {
            "Content-Type": `multipart/form-data; boundary=${this.boundary}`
        };
    }
    /**
     * Returns internal readable stream, allowing to read the FormData content
     *
     * @deprecated FormData#stream property is non-standard and will be removed from this package in the next major release (4.x). Use https://npmjs.com/form-data-encoder package to serilize FormData.
     */
    get stream() {
        if (!__classPrivateFieldGet(this, _FormData_stream, "f")) {
            __classPrivateFieldSet(this, _FormData_stream, stream_1.Readable.from(this), "f");
        }
        return __classPrivateFieldGet(this, _FormData_stream, "f");
    }
    /**
     * Returns computed length of the FormData content.
     *
     * @deprecated FormData#getComputedLength() method is non-standard and will be removed from this package in the next major release (4.x). Use https://npmjs.com/form-data-encoder package to serilize FormData.
     */
    getComputedLength() {
        let length = 0;
        for (const [name, value] of this) {
            length += Buffer.byteLength(__classPrivateFieldGet(this, _FormData_instances, "m", _FormData_getHeader).call(this, name, value));
            length += getLength_1.default(value) + CRLF_BYTES_LENGTH;
        }
        return length + Buffer.byteLength(__classPrivateFieldGet(this, _FormData_footer, "f"));
    }
    append(name, value, filenameOrOptions, options) {
        return __classPrivateFieldGet(this, _FormData_instances, "m", _FormData_setField).call(this, {
            name,
            value,
            filenameOrOptions,
            options,
            append: true,
            argsLength: arguments.length
        });
    }
    set(name, value, filenameOrOptions, options) {
        return __classPrivateFieldGet(this, _FormData_instances, "m", _FormData_setField).call(this, {
            name,
            value,
            filenameOrOptions,
            options,
            append: false,
            argsLength: arguments.length
        });
    }
    /**
     * Returns the first value associated with the given name.
     * Buffer and Readable values will be returned as-is.
     *
     * @param {string} name A name of the value you want to retrieve.
     */
    get(name) {
        const field = __classPrivateFieldGet(this, _FormData_content, "f").get(String(name));
        if (!field) {
            return null;
        }
        return field[0];
    }
    /**
     * Returns all the values associated with
     * a given key from within a FormData object.
     *
     * @param {string} name A name of the value you want to retrieve.
     */
    getAll(name) {
        const field = __classPrivateFieldGet(this, _FormData_content, "f").get(String(name));
        if (!field) {
            return [];
        }
        return [...field];
    }
    /**
     * Check if a field with the given name exists inside FormData.
     *
     * @param name A name of the field you want to test for.
     *
     * @return
     */
    has(name) {
        return __classPrivateFieldGet(this, _FormData_content, "f").has(String(name));
    }
    /**
     * Deletes a key and its value(s) from a FormData object.
     *
     * @param name The name of the key you want to delete.
     */
    delete(name) {
        return void __classPrivateFieldGet(this, _FormData_content, "f").delete(String(name));
    }
    /**
     * Returns an [`iterator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols) allowing to go through the **FormData** keys
     */
    *keys() {
        for (const key of __classPrivateFieldGet(this, _FormData_content, "f").keys()) {
            yield key;
        }
    }
    /**
     * Returns an [`iterator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols) allowing to go through the **FormData** key/value pairs
     */
    *entries() {
        for (const name of this.keys()) {
            const values = this.getAll(name);
            // Yield each value of a field, like browser-side FormData does.
            for (const value of values) {
                yield [name, value];
            }
        }
    }
    /**
     * Returns an [`iterator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols) allowing to go through the **FormData** values
     */
    *values() {
        for (const [, value] of this) {
            yield value;
        }
    }
    /**
     * An alias for FormData#entries()
     */
    [(_FormData_stream = new WeakMap(), _FormData_content = new WeakMap(), _FormData_footer = new WeakMap(), _FormData_instances = new WeakSet(), _FormData_getHeader = function _FormData_getHeader(name, value) {
        let header = "";
        header += `${DASHES}${this.boundary}${CRLF}`;
        header += `Content-Disposition: form-data; name="${name}"`;
        if (isFile_1.default(value)) {
            header += `; filename="${value.name}"${CRLF}`;
            header += `Content-Type: ${value.type || "application/octet-stream"}`;
        }
        return `${header}${CRLF.repeat(2)}`;
    }, _FormData_getField = async function* _FormData_getField() {
        // Note to switch back to reading from this.#content if any extra logic will be necessary in a future, because the public FormData API returns values only as `string | File`
        for (const [name, value] of this) {
            // Set field's header
            yield __classPrivateFieldGet(this, _FormData_instances, "m", _FormData_getHeader).call(this, name, value);
            if (isFile_1.default(value)) {
                yield* value.stream();
            }
            else {
                yield value;
            }
            // Add trailing carriage
            yield CRLF;
        }
        // Add a footer when all fields ended
        yield __classPrivateFieldGet(this, _FormData_footer, "f");
    }, _FormData_setField = function _FormData_setField({ name, value, append, filenameOrOptions, options, argsLength }) {
        const methodName = append ? "append" : "set";
        name = String(name);
        let filename;
        if (isPlainObject_1.default(filenameOrOptions)) {
            [options, filename] = [filenameOrOptions, undefined];
        }
        else {
            filename = filenameOrOptions;
        }
        // FormData required at least 2 arguments to be set.
        if (argsLength < 2) {
            throw new TypeError(`Failed to execute '${methodName}' on 'FormData': `
                + `2 arguments required, but only ${argsLength} present.`);
        }
        // Get a filename from either an argument or options
        filename || (filename = options === null || options === void 0 ? void 0 : options.filename);
        // If a value is a file-like object, then get and normalize the filename
        if (isFile_1.default(value) || isReadStream_1.default(value) || isBuffer(value)) {
            // Note that the user-defined filename has higher precedence
            filename = path_1.basename(filename || getFilename_1.default(value));
        }
        else if (filename) { // If a value is not a file-like, but the filename is present, then throw the error
            throw new TypeError(`Failed to execute '${methodName}' on 'FormData': `
                + "parameter 2 is not one of the following types: "
                + "ReadStream | Buffer | File | Blob");
        }
        // Normalize field's value
        if (isReadStream_1.default(value)) {
            // TODO: Remove ReadStream support in favour of fileFromPath and fileFromPathSync
            value = fileFromPath_1.fileFromPathSync(String(value.path), filename, options);
        }
        else if (isBuffer(value)) {
            // TODO: Remove Buffer in a field's value support in favour of Blob.
            value = new File_1.File([value], filename, options);
        }
        else if (isFile_1.default(value)) {
            value = new File_1.File([value], filename, {
                ...options,
                // Take params from the previous File or Blob instance
                // But keep user-defined options higher percidence
                type: (options === null || options === void 0 ? void 0 : options.type) || value.type,
                lastModified: (options === null || options === void 0 ? void 0 : options.lastModified) || value.lastModified
            });
        }
        else {
            // A non-file fields must be converted to string
            value = String(value);
        }
        const values = __classPrivateFieldGet(this, _FormData_content, "f").get(name);
        if (!values) {
            return void __classPrivateFieldGet(this, _FormData_content, "f").set(name, [value]);
        }
        // Replace a value of the existing field if "set" called
        if (!append) {
            return void __classPrivateFieldGet(this, _FormData_content, "f").set(name, [value]);
        }
        // Append a new value to the existing field
        values.push(value);
    }, Symbol.iterator)]() {
        return this.entries();
    }
    /**
     * Executes given callback function for each field of the FormData instance
     */
    forEach(fn, ctx) {
        for (const [name, value] of this) {
            fn.call(ctx, value, name, this);
        }
    }
    get [Symbol.toStringTag]() {
        return "FormData";
    }
    [util_1.inspect.custom]() {
        return this[Symbol.toStringTag];
    }
    /**
     * Returns an async iterator allowing to read form-data body using **for-await-of** syntax.
     * Read the [`async iteration proposal`](https://github.com/tc39/proposal-async-iteration) to get more info about async iterators.
     *
     * @deprecated FormData#[Symbol.asyncIterator]() method is non-standard and will be removed from this package in the next major release (4.x). Use https://npmjs.com/form-data-encoder package to serilize FormData.
     */
    async *[_a = Symbol.asyncIterator]() {
        for await (const ch of __classPrivateFieldGet(this, _FormData_instances, "m", _FormData_getField).call(this)) {
            yield isBuffer(ch) ? ch : Buffer.from(String(ch));
        }
    }
}
__decorate([
    deprecateHeaders_1.default
], FormData.prototype, "headers", null);
__decorate([
    deprecateStream_1.default
], FormData.prototype, "stream", null);
__decorate([
    deprecateGetComputedLength_1.default
], FormData.prototype, "getComputedLength", null);
__decorate([
    deprecateBuffer_1.default,
    deprecateReadStream_1.default
], FormData.prototype, "append", null);
__decorate([
    deprecateBuffer_1.default,
    deprecateReadStream_1.default
], FormData.prototype, "set", null);
__decorate([
    deprecateSymbolAsyncIterator_1.default
], FormData.prototype, _a, null);
exports.FormData = FormData;
